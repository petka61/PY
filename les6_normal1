# Задача - 1
# Ранее мы с вами уже писали игру, используя словари в качестве
# структур данных для нашего игрока и врага, давайте сделаем новую, но уже с ООП
# Опишите базовый класс Person, подумайте какие общие данные есть и у врага и у игрока
# Не забудьте, что у них есть помимо общих аттрибутов и общие методы.
# Теперь наследуясь от Person создайте 2 класса Player, Enemy.
# У каждой сущности должы быть аттрибуты health, damage, armor
# У каждой сущности должно быть 2 метода, один для подсчета урона, с учетом брони противника,
# второй для атаки противника.
# Функция подсчета урона должна быть инкапсулирована
# Вам надо описать игровой цикл так же через класс.
# Создайте экземпляры классов, проведите бой. Кто будет атаковать первым оставляю на ваше усмотрение.

class Person:
    def __init__(self, armor, health, damage):
        self.armor = armor
        self.health = health
        self.damage = damage
        def defence():
            enemy['health'] = enemy['health'] - player['damage'] / enemy['armor']
            player['health'] = player['health'] - enemy['damage'] / player['armor']

    def attack(self):
        enemy['health'] = enemy['health'] - player['damage']
        if enemy['health'] <= 0:
            print ("Силы противника иссякли. Вы победили.")
            exit ()
        player['health'] = player['health'] - enemy['damage']
        if player['health'] <= 0:
            print ("Ваши силы иссякли. Вы проиграли.")
            exit ()

person = Person(0, 0, 0)

class Enemy(Person):
    def __init__(self):
        super().__init__(self, armor, health, damage)

enemy = Enemy(1.4, 100, 15)

class Player(Person):
    def __init__(self):
        super().__init__(self)

player = Player(1.2, 150, 15)

class Battle(Person):
    def __init__(self):
        super.__init__(self)
    def battle(self):
        while player['health'] or enemy['health'] >= 0:
            attack(player, enemy)
            print (player, enemy, sep='\n')

fight = Battle()
